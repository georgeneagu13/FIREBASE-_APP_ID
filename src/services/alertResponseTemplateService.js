import { enhancedAnalytics } from './enhancedAnalyticsService';
import { alertTrends } from './alertTrendService';

class AlertResponseTemplateService {
  constructor() {
    this.templates = new Map();
    this.customTemplates = new Map();
    this.variables = new Map();
    this.initialized = false;
  }

  async init() {
    if (this.initialized) return;

    try {
      // Register default templates
      this.registerTemplate('performance', this.createPerformanceTemplate());
      this.registerTemplate('error', this.createErrorTemplate());
      this.registerTemplate('security', this.createSecurityTemplate());
      this.registerTemplate('engagement', this.createEngagementTemplate());

      // Register default variables
      this.registerVariable('timestamp', () => new Date().toISOString());
      this.registerVariable('environment', () => process.env.NODE_ENV);
      this.registerVariable('version', () => process.env.APP_VERSION);

      this.initialized = true;
    } catch (error) {
      console.error('Alert response template init error:', error);
    }
  }

  registerTemplate(type, template) {
    this.templates.set(type, template);
  }

  registerCustomTemplate(name, template) {
    this.customTemplates.set(name, {
      ...template,
      created: Date.now(),
      modified: Date.now(),
    });
  }

  registerVariable(name, resolver) {
    this.variables.set(name, resolver);
  }

  async generateResponse(alert, customData = {}) {
    try {
      const template = this.selectTemplate(alert);
      if (!template) return null;

      const variables = await this.resolveVariables(alert, customData);
      const response = this.processTemplate(template, variables);

      await this.logTemplateUsage(template, alert);

      return response;
    } catch (error) {
      console.error('Generate response error:', error);
      return null;
    }
  }

  selectTemplate(alert) {
    // Check custom templates first
    const customTemplate = this.customTemplates.get(alert.type);
    if (customTemplate) return customTemplate;

    // Fall back to default templates
    return this.templates.get(alert.type);
  }

  async resolveVariables(alert, customData) {
    const variables = {
      alert: {
        id: alert.id,
        type: alert.type,
        priority: alert.priority,
        timestamp: alert.timestamp,
        ...alert.data,
      },
      custom: customData,
    };

    // Resolve dynamic variables
    for (const [name, resolver] of this.variables) {
      try {
        variables[name] = await resolver(alert, customData);
      } catch (error) {
        console.error(`Variable resolution error (${name}):`, error);
        variables[name] = null;
      }
    }

    return variables;
  }

  processTemplate(template, variables) {
    let content = template.content;

    // Replace variables
    content = content.replace(/\{\{([\w.]+)\}\}/g, (match, path) => {
      return this.getNestedValue(variables, path) || match;
    });

    // Process conditional blocks
    content = this.processConditionals(content, variables);

    return {
      type: template.type,
      format: template.format,
      content,
      metadata: {
        generated: Date.now(),
        template: template.name,
        variables: Object.keys(variables),
      },
    };
  }

  processConditionals(content, variables) {
    return content.replace(
      /\{%\s*if\s+([\w.]+)\s*%\}(.*?)\{%\s*endif\s*%\}/gs,
      (match, path, block) => {
        const value = this.getNestedValue(variables, path);
        return value ? block : '';
      }
    );
  }

  getNestedValue(obj, path) {
    return path.split('.').reduce((current, key) => current?.[key], obj);
  }

  createPerformanceTemplate() {
    return {
      name: 'performance_alert',
      type: 'performance',
      format: 'markdown',
      content: `
# Performance Alert: {{alert.metric}}

**Priority:** {{alert.priority}}
**Timestamp:** {{timestamp}}
**Environment:** {{environment}}

## Details
- Metric: {{alert.metric}}
- Current Value: {{alert.value}}
- Threshold: {{alert.threshold}}
- Deviation: {{alert.deviation}}%

{% if alert.affected_services %}
## Affected Services
{{alert.affected_services}}
{% endif %}

## Recommended Actions
1. Review system metrics
2. Check service health
3. Scale resources if needed

## Additional Context
{{alert.context}}

---
Generated by AlertBot v{{version}}
      `.trim(),
    };
  }

  createErrorTemplate() {
    return {
      name: 'error_alert',
      type: 'error',
      format: 'markdown',
      content: `
# Error Alert: {{alert.title}}

**Priority:** {{alert.priority}}
**Timestamp:** {{timestamp}}
**Environment:** {{environment}}

## Error Details
- Type: {{alert.error.type}}
- Message: {{alert.error.message}}
- Location: {{alert.error.location}}

{% if alert.error.stack %}
## Stack Trace
\`\`\`
{{alert.error.stack}}
\`\`\`
{% endif %}

## Impact
- Users Affected: {{alert.impact.users}}
- Services Affected: {{alert.impact.services}}

## Recommended Actions
1. Review error logs
2. Check service dependencies
3. Deploy hotfix if needed

---
Generated by AlertBot v{{version}}
      `.trim(),
    };
  }

  createSecurityTemplate() {
    return {
      name: 'security_alert',
      type: 'security',
      format: 'markdown',
      content: `
# Security Alert: {{alert.title}}

**Priority:** {{alert.priority}}
**Timestamp:** {{timestamp}}
**Environment:** {{environment}}

## Threat Details
- Type: {{alert.threat.type}}
- Source: {{alert.threat.source}}
- Severity: {{alert.threat.severity}}

## Impact Assessment
- Scope: {{alert.impact.scope}}
- Affected Systems: {{alert.impact.systems}}
- Risk Level: {{alert.impact.risk}}

## Immediate Actions Required
1. {{alert.actions.immediate}}
2. Review security logs
3. Update security measures

{% if alert.threat.indicators %}
## Threat Indicators
{{alert.threat.indicators}}
{% endif %}

---
Generated by AlertBot v{{version}}
      `.trim(),
    };
  }

  createEngagementTemplate() {
    return {
      name: 'engagement_alert',
      type: 'engagement',
      format: 'markdown',
      content: `
# Engagement Alert: {{alert.title}}

**Priority:** {{alert.priority}}
**Timestamp:** {{timestamp}}
**Environment:** {{environment}}

## Metrics
- Active Users: {{alert.metrics.activeUsers}}
- Session Duration: {{alert.metrics.sessionDuration}}
- Interaction Rate: {{alert.metrics.interactionRate}}

## Trend Analysis
- Change: {{alert.trend.change}}%
- Period: {{alert.trend.period}}
- Pattern: {{alert.trend.pattern}}

{% if alert.recommendations %}
## Recommendations
{{alert.recommendations}}
{% endif %}

## Action Items
1. Review engagement metrics
2. Analyze user feedback
3. Implement improvements

---
Generated by AlertBot v{{version}}
      `.trim(),
    };
  }

  async logTemplateUsage(template, alert) {
    try {
      await enhancedAnalytics.logEvent('template_used', {
        templateName: template.name,
        templateType: template.type,
        alertType: alert.type,
        alertPriority: alert.priority,
        timestamp: Date.now(),
      });
    } catch (error) {
      console.error('Log template usage error:', error);
    }
  }

  getTemplates() {
    return {
      default: Array.from(this.templates.entries()),
      custom: Array.from(this.customTemplates.entries()),
    };
  }

  getTemplate(name) {
    return this.customTemplates.get(name) || this.templates.get(name);
  }

  updateTemplate(name, updates) {
    const template = this.customTemplates.get(name);
    if (template) {
      this.customTemplates.set(name, {
        ...template,
        ...updates,
        modified: Date.now(),
      });
      return true;
    }
    return false;
  }

  deleteTemplate(name) {
    return this.customTemplates.delete(name);
  }
}

export const alertResponseTemplate = new AlertResponseTemplateService(); 